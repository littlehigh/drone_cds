<?xml version="1.0"?>
<!--
(c) 2005-2015 Copyright, Real-Time Innovations.  All rights reserved.
No duplications, whole or partial, manual or electronic, may be made
without express written permission.  Any such copies, or revisions thereof,
must display this notice unaltered.
This code contains trade secrets of Real-Time Innovations, Inc.
 -->
 <!-- xsi:noNamespaceSchemaLocation="E:/UAV/RTI_Connect/rti_connext_dds-6.1.1/resource/schema/rti_dds_qos_profiles.xsd"
     version="6.1.1" -->

<dds xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xsi:noNamespaceSchemaLocation="https://community.rti.com/schema/current/rti_dds_qos_profiles.xsd">

    <!-- QoS Library containing the QoS profile used in the example.
        A QoS library is a named set of QoS profiles.
    -->
    <qos_library name="RTIProxyQosLibrary">

        <!-- Logging -->
        <!-- https://community.rti.com/kb/enabling-logging-xml-qos-file -->
        <qos_profile name="factoryLogging" is_default_participant_factory_profile="true">
            <participant_factory_qos>
            <logging>
                <!-- <verbosity>SILENT</verbosity> -->
                <verbosity>LOCAL</verbosity>
                <category>ALL</category>
                <print_format>VERBOSE_TIMESTAMPED</print_format>

            <!-- Logging Option  1: no log file -->

            <!-- Logging Option  2: logging to a single file -->
                <!-- <output_file>LogFile.log</output_file> -->

            <!-- Logging Option 3: logging to a file set -->
                <output_file>LogFile_</output_file>
                <output_file_suffix>.log</output_file_suffix>
                <max_bytes_per_file>10000000</max_bytes_per_file>
                <max_files>10</max_files>
            </logging>
            </participant_factory_qos>
        </qos_profile>

        <!-- This profile is used to set up transport settings for the maximum
           size allowed for UDP.  This is required to get the maximum possible
           throughput.  -->

        <qos_profile name="MaxTransportThroughput">

            <domain_participant_qos>
                <transport_builtin>
                    <mask>UDPv4_WAN</mask>
                    <udpv4_wan>
                        <message_size_max>1400</message_size_max>
                    </udpv4_wan>
                </transport_builtin>
                <!-- 11/01 add, by rti recommand -->

                <!-- 啟動後，會主動使用CDS 203.145.221.79:12000-->
                <discovery>
                    <initial_peers>
                        <element>rtps@udpv4_wan://203.145.221.79:12000</element>
                    </initial_peers>
                </discovery>
            </domain_participant_qos>

            <participant_qos>
                <receiver_pool>
                    <buffer_size>1048112</buffer_size>
                    <!-- 524056 - 512KB  -->
                </receiver_pool>
                <property>
                    <value>
                        <!--
                            Configure UDP transport for higher throughput:
                          -->

                        <!-- 11/01 add, by rti recommand -->
                        <element>
                            <name>dds.participant.protocol.rtps_overhead</name>
                            <value>196</value>
                        </element>

                        <!-- 11/01 change, by rti recommand 1048112->1400 -->
                        <element>
                            <name>dds.transport.UDPv4.builtin.parent.message_size_max</name>
                            <value>1400</value>
                            <!--<value>1048112</value>-->
                            <!-- 512 KB  -->
                        </element>

                        <!--
                          The next setting is to setup the buffers for sending and recieving data
                          on the transport to be at least double what our expected message size will be.
                          -->
                        <element>
                            <name>dds.transport.UDPv4.builtin.send_socket_buffer_size</name>
                            <!-- <value>2097152</value> -->
                            <value>50331648</value>
                            <!-- <value>32 MB</value> -->
                        </element>
                        <element>
                            <name>dds.transport.UDPv4.builtin.recv_socket_buffer_size</name>
                            <value>50331648</value>
                            <!-- 16 MB -->
                        </element>
                        <!-- Configure shared memory transport for higher
                             throughput: -->
                        <element>
                            <!--  Set the shared memory maximum message size to
                                  the same value that was set for UDP.   -->
                            <name>dds.transport.shmem.builtin.parent.message_size_max</name>
                            <value>1048112</value>
                            <!-- 512 KB - header sizes -->
                            
                            <!-- <value>65507</value> -->
                            <!-- 64 KB - header sizes -->
                        </element>
                        <element>
                            <!-- Set the size of the shared memory transport's
                                 receive buffer to some large value.  -->
                            <name>dds.transport.shmem.builtin.receive_buffer_size</name>
                            <!-- <value>4194304</value> -->
                            <value>33554432</value>
                            <!-- 16 MB -->
                        </element>
                        <element>
                            <!--  Set the maximum number of messages that the
                                  shared memory transport can cache while
                                  waiting for them to be read and deserialized.
                             -->
                            <name>dds.transport.shmem.builtin.received_message_count_max</name>
                            <value>100000</value>
                            <!-- 524056 - 512KB  -->
                        </element>
                    </value>
                </property>
            </participant_qos>
        </qos_profile>

        <!-- Begin of first DDS Proxy Qos Setting -->
        <qos_profile name="Proxy0Data" base_name="MaxTransportThroughput">
            <datawriter_qos>
            
                <durability>
                    <kind>TRANSIENT_LOCAL_DURABILITY_QOS</kind>
                </durability>
                
                <reliability>
                    <kind>BEST_EFFORT_RELIABILITY_QOS</kind>
                    <!-- <kind>RELIABLE_RELIABILITY_QOS</kind> -->
                    <max_blocking_time>
                        <sec>DURATION_ZERO_SEC</sec>
                        <nanosec>DURATION_ZERO_NSEC</nanosec>
                    </max_blocking_time>
                </reliability>

                <history>
                    <kind>KEEP_ALL_HISTORY_QOS</kind>
                    <depth>50</depth>
                </history>
                
                <resource_limits>
                    <initial_instances>30</initial_instances>
                    <initial_samples>900</initial_samples>
                    <max_samples>15000</max_samples>
                    <max_instances>300</max_instances>
                    <max_samples_per_instance>50</max_samples_per_instance>
                </resource_limits>

                <publish_mode>
                    <kind>ASYNCHRONOUS_PUBLISH_MODE_QOS</kind>
                </publish_mode>

                <protocol>
                    <push_on_write>true</push_on_write>

                    <rtps_reliable_writer>
                        <heartbeat_period>
                            <sec>0</sec>
                            <nanosec>50000000</nanosec>
                        </heartbeat_period>
                        
                        <fast_heartbeat_period>
                            <sec>0</sec>
                            <nanosec>10000000</nanosec>
                        </fast_heartbeat_period>
                        
                        <late_joiner_heartbeat_period>
                            <sec>0</sec>
                            <nanosec>50000000</nanosec>
                        </late_joiner_heartbeat_period>

                        <max_nack_response_delay>
                            <sec>0</sec>
                            <nanosec>0</nanosec>
                        </max_nack_response_delay>

                        <enable_multicast_periodic_heartbeat>true</enable_multicast_periodic_heartbeat>
                        
                        <max_bytes_per_nack_response>10000</max_bytes_per_nack_response>
                        
                        <max_heartbeat_retries>DDS_LENGTH_UNLIMITED</max_heartbeat_retries>
                    </rtps_reliable_writer>
                </protocol>
            </datawriter_qos>

            <datareader_qos>
                <durability>
                    <kind>TRANSIENT_LOCAL_DURABILITY_QOS</kind>
                </durability>
                <reliability>
                    <kind>BEST_EFFORT_RELIABILITY_QOS</kind>
                    <!-- <kind>RELIABLE_RELIABILITY_QOS</kind> -->
                </reliability>
                <history>
                    <kind>KEEP_LAST_HISTORY_QOS</kind>
                    <depth>1</depth>
                </history>

                <resource_limits>
                    <initial_instances>30</initial_instances>
                    <initial_samples>900</initial_samples>
                    <max_samples>15000</max_samples>
                    <max_instances>300</max_instances>
                    <max_samples_per_instance>50</max_samples_per_instance>
                </resource_limits>

                <protocol>
                    <rtps_reliable_reader>
                        <min_heartbeat_response_delay>
                            <sec>0</sec>
                            <nanosec>0</nanosec>
                        </min_heartbeat_response_delay>
                        <max_heartbeat_response_delay>
                            <sec>0</sec>
                            <nanosec>0</nanosec>
                        </max_heartbeat_response_delay>
                    </rtps_reliable_reader>
                </protocol>
            </datareader_qos>

            <participant_qos>
                <participant_name>
                    <name>Streaming Applicaiton</name>
                </participant_name>
            </participant_qos>
        </qos_profile>
        <!-- End of first DDS Proxy Qos Setting    -->

        <!-- Begin of Second DDS Proxy Qos Setting -->
        <qos_profile name="Proxy1Data" base_name="MaxTransportThroughput">
            <datawriter_qos>
                <publish_mode>
                    <kind>ASYNCHRONOUS_PUBLISH_MODE_QOS</kind>
                    <flow_controller_name>dds.flow_controller.token_bucket.priority_flow</flow_controller_name>

                    <!-- DataWriter priority - larger number is higher priority -->
                    <priority>10</priority>
                </publish_mode>

                <reliability>
                    <kind>RELIABLE_RELIABILITY_QOS</kind>
                    <!-- <kind>BEST_EFFORT_RELIABILITY_QOS</kind> -->
                    <max_blocking_time>
                        <sec>5</sec>
                        <nanosec>0</nanosec>
                    </max_blocking_time>
                </reliability>

                <history>
                    <kind>KEEP_ALL_HISTORY_QOS</kind>
                </history>

                <resource_limits>
                    <initial_samples>1</initial_samples>
                </resource_limits>

                <protocol>
                    <rtps_reliable_writer>
                        <heartbeat_period>
                            <sec>0</sec>
                            <nanosec>200000000</nanosec>
                        </heartbeat_period>
                        <fast_heartbeat_period>
                            <sec>0</sec>
                            <nanosec>20000000</nanosec>
                        </fast_heartbeat_period>
                        <late_joiner_heartbeat_period>
                            <sec>0</sec>
                            <nanosec>20000000</nanosec>
                        </late_joiner_heartbeat_period>

                        <max_nack_response_delay>
                            <sec>0</sec>
                            <nanosec>0</nanosec>
                        </max_nack_response_delay>

                        <high_watermark>25</high_watermark>

                        <low_watermark>10</low_watermark>

                        <max_heartbeat_retries>500</max_heartbeat_retries>

                    </rtps_reliable_writer>
                </protocol>

            </datawriter_qos>

            <datareader_qos>

                <reliability>
                    <kind>RELIABLE_RELIABILITY_QOS</kind>
                </reliability>

                <protocol>
                    <rtps_reliable_reader>
                        <min_heartbeat_response_delay>
                            <sec>0</sec>
                            <nanosec>0</nanosec>
                        </min_heartbeat_response_delay>
                        <max_heartbeat_response_delay>
                            <sec>0</sec>
                            <nanosec>0</nanosec>
                        </max_heartbeat_response_delay>
                    </rtps_reliable_reader>
                </protocol>

                <history>
                    <kind>KEEP_ALL_HISTORY_QOS</kind>
                </history>

                <resource_limits>
                    <initial_samples>1</initial_samples>
                    <max_samples>20</max_samples>
                </resource_limits>

                <reader_resource_limits>
                    <dynamically_allocate_fragmented_samples>true</dynamically_allocate_fragmented_samples>
                </reader_resource_limits>
            </datareader_qos>
        </qos_profile>
        <!-- End of Second DDS Proxy Qos Setting -->

        <!-- Begin of third DDS Proxy Qos Setting -->
        <qos_profile name="Proxy2Data" base_name="MaxTransportThroughput">
            <datawriter_qos>
                <publish_mode>
                    <kind>ASYNCHRONOUS_PUBLISH_MODE_QOS</kind>
                    <flow_controller_name>dds.flow_controller.token_bucket.priority_flow</flow_controller_name>

                    <!-- DataWriter priority - larger number is higher priority -->
                    <!-- <priority>10</priority> -->
                </publish_mode>

                <reliability>
                    <kind>RELIABLE_RELIABILITY_QOS</kind>
                </reliability>

                <history>
                    <kind>KEEP_LAST_HISTORY_QOS</kind>
                    <depth>10</depth>
                </history>
            </datawriter_qos>

            <datareader_qos>

                <reliability>
                    <kind>RELIABLE_RELIABILITY_QOS</kind>
                </reliability>

                <protocol>
                    <rtps_reliable_reader>
                        <min_heartbeat_response_delay>
                            <sec>0</sec>
                            <nanosec>0</nanosec>
                        </min_heartbeat_response_delay>
                        <max_heartbeat_response_delay>
                            <sec>0</sec>
                            <nanosec>0</nanosec>
                        </max_heartbeat_response_delay>
                    </rtps_reliable_reader>
                </protocol>

                <history>
                    <kind>KEEP_LAST_HISTORY_QOS</kind>
                    <depth>10</depth>
                </history>

                <resource_limits>
                    <initial_samples>1</initial_samples>
                    <max_samples>20</max_samples>
                </resource_limits>

                <reader_resource_limits>
                    <dynamically_allocate_fragmented_samples>true</dynamically_allocate_fragmented_samples>
                </reader_resource_limits>
            </datareader_qos>
        </qos_profile>
        <!-- End of Third DDS Proxy Qos Setting -->

        <!-- Begin of forth DDS Proxy Qos Setting -->
        <qos_profile name="Proxy3Data" base_name="MaxTransportThroughput">
            <datawriter_qos>
                <publish_mode>
                    <kind>ASYNCHRONOUS_PUBLISH_MODE_QOS</kind>
                </publish_mode>
            </datawriter_qos>

            <datareader_qos>


            </datareader_qos>
        </qos_profile>
        <!-- End of Third DDS Proxy Qos Setting -->
    </qos_library>

    <!-- types -->
    <types>
        <struct name="DroneType" extensibility="extensible">
            <member name="running_time" type="long"/>
            <member name="drone_pitch" type="long"/>
            <member name="drone_yaw" type="long"/>
            <member name="drone_roll" type="long"/>
            <member name="drone_lon" type="long"/>
            <member name="drone_lat" type="long"/>
            <member name="drone_alt" type="long"/>
            <member name="GPS_signal_strength" type="long"/>
            <member name="drone_speed" type="long"/>
            <member name="drone_status" type="char"/>
            <member name="flight_distance" type="long"/>
            <member name="battery_voltage" type="long"/>
            <member name="battery_level" type="long"/>
            <member name="battery_current" type="long"/>
        </struct>
    </types>

    <!-- <member name="drone_gpsNum" type="long"/> -->

    <!-- Domain Library -->
    <domain_library name="MyDomainLibrary">
        <domain name="MyDomain" domain_id="0">
            <register_type name="DroneType" type_ref="DroneType" />
            <topic name="Drone" register_type_ref="DroneType"/>
        </domain>
    </domain_library>

    <!-- Participant library -->
    <domain_participant_library name="MyParticipantLibrary">
        <domain_participant name="MyPubParticipant" domain_ref="MyDomainLibrary::MyDomain">
            <publisher name="MyPublisher">
                <data_writer name="MyDroneWriter" topic_ref="Drone" />
            </publisher>
        </domain_participant>

        <!-- We use separate participants because we run the writer and the reader
            on different applications, and wouldn't want to create the reader
            in writer.py, or the writer in reader.py -->
        <domain_participant name="MySubParticipant" domain_ref="MyDomainLibrary::MyDomain">
            <subscriber name="MySubscriber">
                <data_reader name="MyDroneReader" topic_ref="Drone" />
            </subscriber>
        </domain_participant>

        <!-- The transform.py script reads Drone and writes Drone -->
        <domain_participant name="TransformationParticipant" domain_ref="MyDomainLibrary::MyDomain">
            <subscriber name="MySubscriber">
                <data_reader name="MyDroneReader" topic_ref="Drone" />
            </subscriber>
            <publisher name="MyPublisher">
                <data_writer name="MyDroneWriter" topic_ref="Drone" />
            </publisher>
        </domain_participant>
    </domain_participant_library>
</dds>
